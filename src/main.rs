use semver::Version;

static AUTH_TOKEN: &str = include_str!("../.token");

#[tokio::main]
async fn main() {
    let client = reqwest::ClientBuilder::new()
        .redirect(reqwest::redirect::Policy::none())
        .build()
        .expect("failed to build client");
    let res = client
        .get("http://www.unicode.org/versions/latest/")
        .send()
        .await
        .expect("failed to complete request to unicode version");
    let latest = res
        .headers()
        .get("location")
        .expect("response should be a redirect");
    let version = parse_version_from(latest.to_str().unwrap()).unwrap();
    let last_checked = get_last_checked().unwrap_or_else(|| Version::new(0, 0, 0));
    if version > last_checked {
        run_update(&version).expect("failed to update");
        open_pr(&version).await.expect("failed to open pr");
    }
    save_last_checked(version).expect("failed to save last checked version");
}

use std::process::Command;
fn run_update(version: &Version) -> Result<(), Box<dyn std::error::Error>> {
    let _ = create_base_cmd("git").arg("pull").spawn()?.wait()?;

    Command::new("python")
        .arg("../unicode-xid/scripts/unicode.py")
        .arg(version.to_string())
        .spawn()?
        .wait()?;
    let new = std::path::PathBuf::from("./tables.rs");
    if new.exists() {
        std::fs::copy(&new, "../unicode-xid/src/tables.rs")?;
        std::fs::remove_file(&new)?;
        std::fs::remove_file("./DerivedCoreProperties.txt")?;
        std::fs::remove_file("./ReadMe.txt")?;
        let _fmt = create_base_cmd("cargo")
            .arg("fmt")
            .spawn()?
            .wait();
        let _ = create_base_cmd("git").arg("add").arg(".").spawn()?.wait();
        let _ = create_base_cmd("git")
            .arg("commit")
            .arg("-m")
            .arg(&format!("updated to version {:}", version))
            .spawn()?
            .wait();
        let _ = create_base_cmd("git").arg("push").spawn()?.wait();
    }
    Ok(())
}

fn create_base_cmd(cmd: &str) -> Command {
    let mut ret = Command::new(cmd);
    ret.current_dir("../unicode-xid");
    ret
}

fn parse_version_from(url: &str) -> Option<Version> {
    let no_trailer = url.trim_end_matches('/');
    let last_slash = no_trailer.rfind('/')?;
    let unicode_version = &no_trailer[last_slash + 1..];
    let version = unicode_version.trim_start_matches("Unicode");
    Version::parse(version).ok()
}

fn get_last_checked() -> Option<Version> {
    let last_checked = std::fs::read_to_string(".last_version").ok()?;
    Version::parse(&last_checked).ok()
}

fn save_last_checked(version: Version) -> Result<(), Box<dyn std::error::Error>> {
    std::fs::write(".last_version", version.to_string())?;
    Ok(())
}

async fn open_pr(version: &Version) -> Result<(), Box<dyn std::error::Error>> {
    let c = octocrab::Octocrab::builder()
        .personal_token(AUTH_TOKEN.lines().next().unwrap().to_string())
        .build()
        .expect("failed to create GH client");
    let pulls = c.pulls("unicode-rs", "unicode-xid");
    let title = format!("Update to Unicode version {}", version);
    let body = "This pull request was generated by an automated process".to_string();
    pulls
        .create(title, "FreeMasen:master", "master")
        .body(body)
        .send()
        .await?;
    Ok(())
}
